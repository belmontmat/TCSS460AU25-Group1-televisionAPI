{
	"info": {
		"_postman_id": "278c3ecf-7a05-4f97-b880-57b390d49d22",
		"name": "TV Database System API Tests - Complete",
		"description": "Comprehensive test suite for the TV Database API\n\nContributors: Preston Sia, Mathew Belmont, Sean Miller, Abdul Hassan",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "45398775",
		"_collection_link": "https://preston-4684692.postman.co/workspace/Preston's-Workspace~ce3b4307-7a19-4b02-80ab-a279801f6c3d/collection/45398775-278c3ecf-7a05-4f97-b880-57b390d49d22?action=share&source=collection_link&creator=45398775"
	},
	"item": [
		{
			"name": "Documentation",
			"item": [
				{
					"name": "Get API Documentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is text/html\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});",
									"",
									"// Test response time",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"// Test response body contains HTML",
									"pm.test(\"Response contains HTML content\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api-docs"
					},
					"response": []
				}
			]
		},
		{
			"name": "Actors",
			"item": [
				{
					"name": "Get All Actors - Default Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has required properties\", function () {",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('page');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test(\"Properties have correct types\", function () {",
									"    pm.expect(jsonData.count).to.be.a('number');",
									"    pm.expect(jsonData.page).to.be.a('number');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"if (jsonData.data.length > 0) {",
									"    pm.test(\"Actor items have required fields\", function () {",
									"        const actor = jsonData.data[0];",
									"        pm.expect(actor).to.have.property('actor_id');",
									"        pm.expect(actor).to.have.property('name');",
									"        pm.expect(actor).to.have.property('profile_url');",
									"    });",
									"    ",
									"    pm.environment.set(\"test_actor_id\", jsonData.data[0].actor_id);",
									"}",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/actors"
					},
					"response": []
				},
				{
					"name": "Get All Actors - With Name Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"if (jsonData.data.length > 0) {",
									"    pm.test(\"Filtered actors contain search term\", function () {",
									"        jsonData.data.forEach(actor => {",
									"            pm.expect(actor.name.toLowerCase()).to.include('smith');",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/actors?name=Smith",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"actors"
							],
							"query": [
								{
									"key": "name",
									"value": "Smith"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actor by ID - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Actor has required fields\", function () {",
									"    pm.expect(jsonData).to.have.property('actor_id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('profile_url');",
									"});",
									"",
									"pm.test(\"Field types are correct\", function () {",
									"    pm.expect(jsonData.actor_id).to.be.a('number');",
									"    pm.expect(jsonData.name).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/actors/{{test_actor_id}}"
					},
					"response": []
				},
				{
					"name": "Get Actor by ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Error response structure\", function () {",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/actors/999999999"
					},
					"response": []
				},
				{
					"name": "Get Shows by Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has required properties\", function () {",
									"    pm.expect(jsonData).to.have.property('actor');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('shows');",
									"});",
									"",
									"pm.test(\"Properties have correct types\", function () {",
									"    pm.expect(jsonData.actor).to.be.a('string');",
									"    pm.expect(jsonData.count).to.be.a('number');",
									"    pm.expect(jsonData.shows).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Count matches array length\", function () {",
									"    pm.expect(jsonData.shows.length).to.equal(jsonData.count);",
									"});",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/actors/{{test_actor_id}}/shows"
					},
					"response": []
				},
				{
					"name": "Get Actor Top-Rated Shows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has required properties\", function () {",
									"    pm.expect(jsonData).to.have.property('actor');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('shows');",
									"});",
									"",
									"pm.test(\"Shows array is limited\", function () {",
									"    pm.expect(jsonData.shows.length).to.be.at.most(5);",
									"});",
									"",
									"if (jsonData.shows.length > 1) {",
									"    pm.test(\"Shows are ordered by rating descending\", function () {",
									"        for (let i = 0; i < jsonData.shows.length - 1; i++) {",
									"            pm.expect(jsonData.shows[i].tmdb_rating).to.be.at.least(jsonData.shows[i + 1].tmdb_rating);",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/actors/{{test_actor_id}}/ratings?count=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"actors",
								"{{test_actor_id}}",
								"ratings"
							],
							"query": [
								{
									"key": "count",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Shows",
			"item": [
				{
					"name": "Get All Shows - Default Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has required properties\", function () {",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('page');",
									"    pm.expect(jsonData).to.have.property('limit');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"// Test data types",
									"pm.test(\"Properties have correct data types\", function () {",
									"    pm.expect(jsonData.count).to.be.a('number');",
									"    pm.expect(jsonData.page).to.be.a('number');",
									"    pm.expect(jsonData.limit).to.be.a('number');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"// Test default pagination values",
									"pm.test(\"Default pagination values are correct\", function () {",
									"    pm.expect(jsonData.page).to.equal(1);",
									"    pm.expect(jsonData.limit).to.equal(50);",
									"});",
									"",
									"// Test data array length",
									"pm.test(\"Data array length does not exceed limit\", function () {",
									"    pm.expect(jsonData.data.length).to.be.at.most(jsonData.limit);",
									"});",
									"",
									"// Test individual show structure",
									"if (jsonData.data.length > 0) {",
									"    pm.test(\"Show items have required fields\", function () {",
									"        const show = jsonData.data[0];",
									"        pm.expect(show).to.have.property('show_id');",
									"        pm.expect(show).to.have.property('name');",
									"        pm.expect(show).to.have.property('original_name');",
									"        pm.expect(show).to.have.property('first_air_date');",
									"        pm.expect(show).to.have.property('status');",
									"        pm.expect(show).to.have.property('seasons');",
									"        pm.expect(show).to.have.property('episodes');",
									"        pm.expect(show).to.have.property('tmdb_rating');",
									"        pm.expect(show).to.have.property('popularity');",
									"        pm.expect(show).to.have.property('poster_url');",
									"    });",
									"    ",
									"    pm.test(\"Show field types are correct\", function () {",
									"        const show = jsonData.data[0];",
									"        pm.expect(show.show_id).to.be.a('number');",
									"        pm.expect(show.name).to.be.a('string');",
									"        pm.expect(show.seasons).to.be.a('number');",
									"        pm.expect(show.episodes).to.be.a('number');",
									"        pm.expect(show.tmdb_rating).to.be.a('number');",
									"        pm.expect(show.popularity).to.be.a('number');",
									"    });",
									"    ",
									"    // Store first show ID for later tests",
									"    pm.environment.set(\"test_show_id\", jsonData.data[0].show_id);",
									"}",
									"",
									"// Test response time",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/shows"
					},
					"response": []
				},
				{
					"name": "Get All Shows - Custom Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"// Test custom pagination values",
									"pm.test(\"Pagination reflects query parameters\", function () {",
									"    pm.expect(jsonData.page).to.equal(2);",
									"    pm.expect(jsonData.limit).to.equal(20);",
									"});",
									"",
									"// Test data array length matches limit",
									"pm.test(\"Data array length does not exceed requested limit\", function () {",
									"    pm.expect(jsonData.data.length).to.be.at.most(20);",
									"});",
									"",
									"// Test that page 2 has different data than page 1",
									"pm.test(\"Response contains data array\", function () {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows?page=2&limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Shows - Maximum Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"// Test maximum limit",
									"pm.test(\"Maximum limit of 100 is respected\", function () {",
									"    pm.expect(jsonData.limit).to.be.at.most(100);",
									"    pm.expect(jsonData.data.length).to.be.at.most(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows?limit=100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Shows - Minimum Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"// Test minimum page value",
									"pm.test(\"Page is at least 1\", function () {",
									"    pm.expect(jsonData.page).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows?page=1&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Show by ID - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"// Test detailed show structure",
									"pm.test(\"Show detail has all required fields\", function () {",
									"    // Summary fields",
									"    pm.expect(jsonData).to.have.property('show_id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('original_name');",
									"    pm.expect(jsonData).to.have.property('first_air_date');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('seasons');",
									"    pm.expect(jsonData).to.have.property('episodes');",
									"    pm.expect(jsonData).to.have.property('tmdb_rating');",
									"    pm.expect(jsonData).to.have.property('popularity');",
									"    pm.expect(jsonData).to.have.property('poster_url');",
									"    ",
									"    // Detail-specific fields",
									"    pm.expect(jsonData).to.have.property('last_air_date');",
									"    pm.expect(jsonData).to.have.property('overview');",
									"    pm.expect(jsonData).to.have.property('vote_count');",
									"    pm.expect(jsonData).to.have.property('backdrop_url');",
									"    pm.expect(jsonData).to.have.property('genres');",
									"    pm.expect(jsonData).to.have.property('creators');",
									"    pm.expect(jsonData).to.have.property('network');",
									"    pm.expect(jsonData).to.have.property('companies');",
									"    pm.expect(jsonData).to.have.property('actors');",
									"});",
									"",
									"// Test field types",
									"pm.test(\"Show detail fields have correct types\", function () {",
									"    pm.expect(jsonData.show_id).to.be.a('number');",
									"    pm.expect(jsonData.name).to.be.a('string');",
									"    pm.expect(jsonData.overview).to.be.a('string');",
									"    pm.expect(jsonData.vote_count).to.be.a('number');",
									"    pm.expect(jsonData.genres).to.be.an('array');",
									"    pm.expect(jsonData.creators).to.be.an('array');",
									"    pm.expect(jsonData.network).to.be.an('object');",
									"    pm.expect(jsonData.companies).to.be.an('array');",
									"    pm.expect(jsonData.actors).to.be.an('array');",
									"});",
									"",
									"// Test genres structure",
									"if (jsonData.genres.length > 0) {",
									"    pm.test(\"Genre objects have correct structure\", function () {",
									"        const genre = jsonData.genres[0];",
									"        pm.expect(genre).to.have.property('genre_id');",
									"        pm.expect(genre).to.have.property('name');",
									"        pm.expect(genre.genre_id).to.be.a('number');",
									"        pm.expect(genre.name).to.be.a('string');",
									"    });",
									"}",
									"",
									"// Test actors structure",
									"if (jsonData.actors.length > 0) {",
									"    pm.test(\"Actor objects have correct structure\", function () {",
									"        const actor = jsonData.actors[0];",
									"        pm.expect(actor).to.have.property('actor_id');",
									"        pm.expect(actor).to.have.property('name');",
									"        pm.expect(actor).to.have.property('character');",
									"        pm.expect(actor).to.have.property('profile_url');",
									"        pm.expect(actor).to.have.property('order_num');",
									"        pm.expect(actor.actor_id).to.be.a('number');",
									"        pm.expect(actor.name).to.be.a('string');",
									"        pm.expect(actor.order_num).to.be.a('number');",
									"    });",
									"}",
									"",
									"// Test networks structure",
									"pm.test(\"Network objects have correct structure\", function () {",
									"    const network = jsonData.network;",
									"    pm.expect(network).to.have.property('network_id');",
									"    pm.expect(network).to.have.property('name');",
									"    pm.expect(network).to.have.property('logo');",
									"    pm.expect(network).to.have.property('country');",
									"});",
									"",
									"// Test rating range",
									"pm.test(\"TMDB rating is within valid range\", function () {",
									"    pm.expect(jsonData.tmdb_rating).to.be.at.least(0);",
									"    pm.expect(jsonData.tmdb_rating).to.be.at.most(10);",
									"});",
									"",
									"// Test positive counts",
									"pm.test(\"Counts are non-negative\", function () {",
									"    pm.expect(jsonData.seasons).to.be.at.least(0);",
									"    pm.expect(jsonData.episodes).to.be.at.least(0);",
									"    pm.expect(jsonData.vote_count).to.be.at.least(0);",
									"});",
									"",
									"// Test response time",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/shows/{{test_show_id}}"
					},
					"response": []
				},
				{
					"name": "Get Show by ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test error response structure",
									"pm.test(\"Error response has error property\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.be.a('string');",
									"});",
									"",
									"// Test content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/shows/999999999"
					},
					"response": []
				},
				{
					"name": "Get Show by ID - Invalid ID Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that invalid ID returns error",
									"pm.test(\"Status code is 400 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
									"});",
									"",
									"// Test error response",
									"pm.test(\"Response has error property\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/shows/invalid_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Genres",
			"item": [
				{
					"name": "Get All Genres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has required properties\", function () {",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test(\"Data is an array\", function () {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"if (jsonData.data.length > 0) {",
									"    pm.test(\"Genre objects have correct structure\", function () {",
									"        const genre = jsonData.data[0];",
									"        pm.expect(genre).to.have.property('genre_id');",
									"        pm.expect(genre).to.have.property('name');",
									"        pm.expect(genre.genre_id).to.be.a('number');",
									"        pm.expect(genre.name).to.be.a('string');",
									"    });",
									"}",
									"",
									"pm.test(\"Count matches array length\", function () {",
									"    pm.expect(jsonData.data.length).to.equal(jsonData.count);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/genres"
					},
					"response": []
				}
			]
		},
		{
			"name": "Statistics",
			"item": [
				{
					"name": "Get Genre Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"Statistics have correct structure\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat).to.have.property('name');",
									"        pm.expect(stat).to.have.property('show_count');",
									"        pm.expect(stat).to.have.property('avg_rating');",
									"    });",
									"    ",
									"    pm.test(\"Field types are correct\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat.name).to.be.a('string');",
									"        pm.expect(stat.show_count).to.be.a('number');",
									"        pm.expect(stat.avg_rating).to.be.a('number');",
									"    });",
									"}",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/stats/genres"
					},
					"response": []
				},
				{
					"name": "Get Network Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"Statistics have correct structure\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat).to.have.property('name');",
									"        pm.expect(stat).to.have.property('show_count');",
									"        pm.expect(stat).to.have.property('avg_rating');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/stats/networks"
					},
					"response": []
				},
				{
					"name": "Get Actor Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"Statistics have correct structure\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat).to.have.property('name');",
									"        pm.expect(stat).to.have.property('show_count');",
									"        pm.expect(stat).to.have.property('avg_rating');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/stats/actors"
					},
					"response": []
				},
				{
					"name": "Get Year Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"Year statistics have correct structure\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat).to.have.property('year');",
									"        pm.expect(stat).to.have.property('show_count');",
									"        pm.expect(stat).to.have.property('avg_rating');",
									"    });",
									"    ",
									"    pm.test(\"Year field types are correct\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat.year).to.be.a('number');",
									"        pm.expect(stat.show_count).to.be.a('number');",
									"        pm.expect(stat.avg_rating).to.be.a('number');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/stats/years"
					},
					"response": []
				},
				{
					"name": "Get Country Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"Country statistics have correct structure\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat).to.have.property('country');",
									"        pm.expect(stat).to.have.property('show_count');",
									"        pm.expect(stat).to.have.property('avg_rating');",
									"    });",
									"    ",
									"    pm.test(\"Country field types are correct\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat.country).to.be.a('string');",
									"        pm.expect(stat.show_count).to.be.a('number');",
									"        pm.expect(stat.avg_rating).to.be.a('number');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/stats/countries"
					},
					"response": []
				},
				{
					"name": "Get Status Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"Status statistics have correct structure\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat).to.have.property('status');",
									"        pm.expect(stat).to.have.property('show_count');",
									"    });",
									"    ",
									"    pm.test(\"Status field types are correct\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat.status).to.be.a('string');",
									"        pm.expect(stat.show_count).to.be.a('number');",
									"    });",
									"}",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/stats/status"
					},
					"response": []
				},
				{
					"name": "Get Company Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"Company statistics have correct structure\", function () {",
									"        const stat = jsonData[0];",
									"        pm.expect(stat).to.have.property('name');",
									"        pm.expect(stat).to.have.property('show_count');",
									"        pm.expect(stat).to.have.property('avg_rating');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/stats/companies"
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin - Shows",
			"item": [
				{
					"name": "Create Show - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response contains created show\", function () {",
									"    pm.expect(jsonData).to.have.property('show_id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.equal('Test Show Creation');",
									"});",
									"",
									"pm.test(\"Show has all detail fields\", function () {",
									"    pm.expect(jsonData).to.have.property('overview');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('seasons');",
									"    pm.expect(jsonData).to.have.property('episodes');",
									"});",
									"",
									"pm.environment.set(\"created_show_id\", jsonData.show_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Show Creation\",\n  \"original_name\": \"Test Show Creation\",\n  \"first_air_date\": \"2024-01-15\",\n  \"status\": \"Returning Series\",\n  \"overview\": \"A test show for API testing purposes.\",\n  \"seasons\": 1,\n  \"episodes\": 10,\n  \"tmdb_rating\": 7.5,\n  \"creators\": [\"Test Creator\"],\n  \"country\": \"US\",\n  \"genres\": [1, 2]\n}"
						},
						"url": "{{baseUrl}}/admin/shows"
					},
					"response": []
				},
				{
					"name": "Create Show - Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Error response structure\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Incomplete Show\"\n}"
						},
						"url": "{{baseUrl}}/admin/shows"
					},
					"response": []
				},
				{
					"name": "Create Show - No API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Unauthorized error response\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unauthorized Test\",\n  \"first_air_date\": \"2024-01-01\",\n  \"status\": \"Ended\"\n}"
						},
						"url": "{{baseUrl}}/admin/shows"
					},
					"response": []
				},
				{
					"name": "Update Show - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Show was updated\", function () {",
									"    pm.expect(jsonData).to.have.property('show_id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.equal('Test Show Updated');",
									"});",
									"",
									"pm.test(\"Updated fields are present\", function () {",
									"    pm.expect(jsonData.seasons).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Show Updated\",\n  \"seasons\": 2\n}"
						},
						"url": "{{baseUrl}}/admin/shows/{{created_show_id}}"
					},
					"response": []
				},
				{
					"name": "Update Show - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Not found error response\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Non-existent Show\"\n}"
						},
						"url": "{{baseUrl}}/admin/shows/999999999"
					},
					"response": []
				},
				{
					"name": "Update Show - No API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unauthorized Update\"\n}"
						},
						"url": "{{baseUrl}}/admin/shows/{{created_show_id}}"
					},
					"response": []
				},
				{
					"name": "Delete Show - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.equal('');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"url": "{{baseUrl}}/admin/shows/{{created_show_id}}"
					},
					"response": []
				},
				{
					"name": "Delete Show - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Error response structure\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"url": "{{baseUrl}}/admin/shows/999999999"
					},
					"response": []
				},
				{
					"name": "Delete Show - No API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/admin/shows/{{test_show_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin - Actors",
			"item": [
				{
					"name": "Create Actor - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response contains created actor\", function () {",
									"    pm.expect(jsonData).to.have.property('actor_id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.equal('Test Actor');",
									"});",
									"",
									"pm.test(\"Actor has profile_url\", function () {",
									"    pm.expect(jsonData).to.have.property('profile_url');",
									"});",
									"",
									"pm.environment.set(\"created_actor_id\", jsonData.actor_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Actor\",\n  \"profile_url\": \"https://image.tmdb.org/t/p/test_profile.jpg\"\n}"
						},
						"url": "{{baseUrl}}/admin/actors"
					},
					"response": []
				},
				{
					"name": "Create Actor - Missing Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Error response structure\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profile_url\": \"https://image.tmdb.org/t/p/test.jpg\"\n}"
						},
						"url": "{{baseUrl}}/admin/actors"
					},
					"response": []
				},
				{
					"name": "Create Actor - No API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Unauthorized error response\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unauthorized Actor\"\n}"
						},
						"url": "{{baseUrl}}/admin/actors"
					},
					"response": []
				},
				{
					"name": "Create Actor - Invalid URL Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Validation error response\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Actor with Invalid URL\",\n  \"profile_url\": \"not-a-valid-url\"\n}"
						},
						"url": "{{baseUrl}}/admin/actors"
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Get Shows - Invalid Page (Zero)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test(\"Page defaults to minimum value of 1\", function () {",
									"        pm.expect(jsonData.page).to.be.at.least(1);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows?page=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Shows - Invalid Limit (Exceeds Max)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test(\"Limit is capped at maximum of 100\", function () {",
									"        pm.expect(jsonData.limit).to.be.at.most(100);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows?limit=500",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows"
							],
							"query": [
								{
									"key": "limit",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Shows - Negative Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or defaults to valid page\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test(\"Page is positive\", function () {",
									"        pm.expect(jsonData.page).to.be.at.least(1);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows?page=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows"
							],
							"query": [
								{
									"key": "page",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Show by ID - Invalid ID Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
									"});",
									"",
									"pm.test(\"Response has error property\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/shows/invalid_id"
					},
					"response": []
				},
				{
					"name": "Filter Shows - Invalid Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or handles gracefully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 400) {",
									"    const jsonData = pm.response.json();",
									"    pm.test(\"Error response for invalid rating\", function () {",
									"        pm.expect(jsonData).to.have.property('error');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/filter?min_rating=invalid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"filter"
							],
							"query": [
								{
									"key": "min_rating",
									"value": "invalid"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Show - Invalid Status Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Validation error for invalid status\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Invalid Status Show\",\n  \"first_air_date\": \"2024-01-01\",\n  \"status\": \"Invalid Status\"\n}"
						},
						"url": "{{baseUrl}}/admin/shows"
					},
					"response": []
				},
				{
					"name": "Create Show - Rating Out of Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Validation error for rating out of range\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Invalid Rating Show\",\n  \"first_air_date\": \"2024-01-01\",\n  \"status\": \"Ended\",\n  \"tmdb_rating\": 15.0\n}"
						},
						"url": "{{baseUrl}}/admin/shows"
					},
					"response": []
				},
				{
					"name": "Create Show - Name Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Validation error for name too long\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"This is a very long show name that exceeds the maximum length allowed by the API specification which is 250 characters and we need to make sure this validation works properly so we will continue adding more text until we reach well over 250 characters to ensure the validation catches this error\",\n  \"first_air_date\": \"2024-01-01\",\n  \"status\": \"Ended\"\n}"
						},
						"url": "{{baseUrl}}/admin/shows"
					},
					"response": []
				},
				{
					"name": "Update Show - Invalid Date Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Validation error for invalid date\", function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_air_date\": \"not-a-date\"\n}"
						},
						"url": "{{baseUrl}}/admin/shows/{{test_show_id}}"
					},
					"response": []
				},
				{
					"name": "Get Actor by ID - String Instead of Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Error response present\", function () {",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/actors/not_a_number"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.tvdatabase.com/v1",
			"type": "string"
		}
	]
}