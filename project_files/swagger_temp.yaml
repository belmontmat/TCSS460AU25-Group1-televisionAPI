openapi: 3.0.0
info:
  title: TV Database System API
  description: |
    A comprehensive API for retrieving information on thousands of television shows.
    Users can search using various filters including genre, name, actors, ratings, and more.
    Admin users can add, update, and delete show entries.
    
    **Contributors:** Preston Sia, Mathew Belmont, Sean Miller, Abdul Hassan
  version: 1.0.0
  contact:
    name: API Support
    email: support@tvdatabase.com

servers:
  - url: https://api.tvdatabase.com/v1
    description: Production server
  - url: https://staging-api.tvdatabase.com/v1
    description: Staging server

tags:
  - name: Shows
    description: TV show information and filtering
  - name: Actors
    description: Actor information and their shows
  - name: Admin
    description: Administrative operations (requires authentication)
  - name: Documentation
    description: API documentation endpoints
  - name: Authentication
    description: API Key generation endpoints

paths:
  /api-docs:
    get:
      tags:
        - Documentation
      summary: Get API documentation
      description: Serves the Swagger/OpenAPI documentation UI
      responses:
        '200':
          description: Swagger UI HTML page
          content:
            text/html:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/ServerError'
  /api-key:
    post:
      tags:
        - Authentication
      summary: Generate a new API key
      description: |
        Generates a new API key for authentication with protected endpoints.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                  description: Name of the person or service
                  example: John Doe
                email:
                  type: string
                  format: email
                  description: Email address for contact
                  example: john@example.com
      responses:
        '201':
          description: API key generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "API key generated successfully - save this key, it won't be shown again!"
                  data:
                    type: object
                    properties:
                      api_key:
                        type: string
                        format: uuid
                        description: The generated API key (UUID v4 format)
                        example: 550e8400-e29b-41d4-a716-446655440000
                      name:
                        type: string
                        example: John Doe
                      created_at:
                        type: string
                        format: date-time
                        example: '2024-01-15T10:30:00.000Z'
                      usage:
                        type: string
                        description: Instructions for using the API key
                        example: 'Include this key in the X-API-Key header for protected endpoints: curl -H "X-API-Key: 550e8400-e29b-41d4-a716-446655440000" {{baseUrl}}/protected/shows/all'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /shows:
    get:
      tags:
        - Shows
      summary: Get all TV shows
      description: Retrieve a list of all TV shows in the database with optional filtering
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 1500
                  page:
                    type: integer
                    default: 1
                    minimum: 1
                    example: 2
                  limit:
                    type: integer
                    default: 50
                    maximum: 100
                    example: 25
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShowSummary'
        '500':
          $ref: '#/components/responses/ServerError'

  /shows/{id}:
    get:
      tags:
        - Shows
      summary: Get show by ID
      description: Retrieve detailed information about a specific TV show
      parameters:
        - name: id
          in: path
          required: true
          description: TV show ID
          schema:
            type: integer
          example: 1234
      responses:
        '200':
          description: Show details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /actors:
    get:
      tags:
        - Actors
      summary: Get all actors
      description: Retrieve a list of all actors in the database
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: name
          in: query
          description: Filter by actor name (max 100 characters)
          schema:
            type: string
          example: "Tom Hanks"
      responses:
        '200':
          description: List of actors
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  page:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Actor'

  /actors/{id}:
    get:
      tags:
        - Actors
      summary: Get actor profile
      description: Retrieve detailed information about an actor
      parameters:
        - name: id
          in: path
          required: true
          description: Actor name
          schema:
            type: integer
          example: "Bryan Cranston"
      responses:
        '200':
          description: Actor profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actor'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /actors/{id}/shows:
    get:
      tags:
        - Actors
      summary: Get shows by actor
      description: Retrieve all shows featuring a specific actor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Shows featuring the actor
          content:
            application/json:
              schema:
                type: object
                properties:
                  actor:
                    type: string
                  count:
                    type: integer
                  shows:
                    type: array
                    items:
                      type: object
                      properties:
                        show_id:
                          type: integer
                        name:
                          type: string
                        character:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
          

  /actors/{id}/ratings:
    get:
      tags:
        - Actors
      summary: Get actor's highest rated shows
      description: Retrieve the highest rated shows featuring an actor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: count
          in: query
          description: Number of shows to return (minimum 1, max 50, default 10)
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: Highest rated shows
          content:
            application/json:
              schema:
                type: object
                properties:
                  actor:
                    type: string
                  count:
                    type: integer
                  shows:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShowSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/actors:
      post:
        tags:
          - Admin
        summary: Add new actor
        description: Add a new actor to the database (requires admin authentication). Name cannot be empty. Property "name" can have a maximum of 250 characters, and "profile_url" a maximum of 500. If successful, the newly created entry will be returned. If an actor's name is already present, an HTTP/400 is returned indicating as such, along with the existing actor ID.
        security:
          - ApiKeyAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                properties:
                  name:
                    type: string
                  profile_url:
                    type: string
        responses:
          '201':
            description: Actor created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Actor'
          '400':
            description: Bad request - invalid parameters
            content:
              application/json:
                schema:
                  oneOf:
                    - type: object
                      properties:
                        error:
                          type: string
                          example: "Invalid format"
                        details:
                          type: string
                    - type: object
                      properties:
                        error:
                          type: string
                          example: "Actor already exists"
                        details:
                          type: string
                          example: "An actor with this name already exists in the database"
                        existingID:
                          type: integer
                          example: 1234
                examples:
                  invalidFormat:
                    summary: Invalid format
                    value:
                      error: "Invalid format"
                      details: "Name cannot be empty"
                  nameAlreadyExists:
                    summary: Existing Actor
                    value:
                      error: "Actor already exists"
                      details: "An actor with this name already exists in the database"
                      existingID: 1234
            
          '401':
            $ref: '#/components/responses/Unauthorized'
          '500':
            $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: Admin API key for authentication
  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        default: 1
        minimum: 1
    
    LimitParam:
      name: limit
      in: query
      description: Number of results per page
      schema:
        type: integer
        default: 50
        minimum: 1
        maximum: 100

  schemas:
    ShowSummary:
      type: object
      properties:
        show_id:
          type: integer
          example: 1234
        name:
          type: string
          example: "Breaking Bad"
        original_name:
          type: string
          example: "Breaking Bad"
        first_air_date:
          type: string
          format: date
          example: "2008-01-20"
        status:
          type: string
          example: "Ended"
        seasons:
          type: integer
          example: 5
        episodes:
          type: integer
          example: 62
        tmdb_rating:
          type: number
          format: float
          example: 9.5
        popularity:
          type: number
          format: float
          example: 234.567
        poster_url:
          type: string
          example: "https://image.tmdb.org/poster123.jpg"

    ShowDetail:
      allOf:
        - $ref: '#/components/schemas/ShowSummary'
        - type: object
          properties:
            last_air_date:
              type: string
              format: date
              example: "2013-09-29"
            overview:
              type: string
              example: "A high school chemistry teacher turned methamphetamine producer..."
            vote_count:
              type: integer
              example: 15234
            backdrop_url:
              type: string
              example: "https://image.tmdb.org/backdrop123.jpg"
            genres:
              type: array
              items:
                type: object
                properties:
                  genre_id:
                    type: integer
                  name:
                    type: string
              example:
                - genre_id: 1
                  name: "Drama"
                - genre_id: 5
                  name: "Crime"
            creators:
              type: array
              items:
                type: string
              example: ["Vince Gilligan, Icky"]
            networks:
              type: array
              items:
                type: object
                properties:
                  network_id:
                    type: integer
                  name:
                    type: string
                  logo:
                    type: string
                  countries:
                    type: string
            companies:
              type: array
              items:
                type: object
                properties:
                  company_id:
                    type: integer
                  name:
                    type: string
                  logo:
                    type: string
                  countries:
                    type: string
            actors:
              type: array
              items:
                type: object
                properties:
                  actor_id:
                    type: integer
                  name:
                    type: string
                  character:
                    type: string
                  profile_url:
                    type: string
                  order_num:
                    type: integer
              example:
                - actor_id: 17
                  name: "Bryan Cranston"
                  character: "Walter White"
                  profile_url: "https://image.tmdb.org/profile17.jpg"
                  order_num: 1
    Actor:
      type: object
      properties:
        actor_id:
          type: integer
          example: 17
        name:
          type: string
          example: "Bryan Cranston"
        profile_url:
          type: string
          example: "https://image.tmdb.org/profile17.jpg"
    ErrorResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Human-readable error message
          example: Name already exists - please choose a different name
        errorCode:
          type: string
          description: Machine-readable error code
          example: MSG_NAME_EXISTS
        timestamp:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00.000Z'

  responses:
    BadRequest:
      description: Bad request - invalid parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid query parameters"
              details:
                type: string
    Unauthorized:
      description: Unauthorized - missing or invalid API key
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized access"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No Shows Found with ID: {id}"
    
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error: {error}"