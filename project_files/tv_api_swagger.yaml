openapi: 3.0.0
info:
  title: TV Database System API
  version: "1.0.0"
  description: >
    A clean, rebuilt OpenAPI 3.0 specification for the TV Database System.
    Includes public show/actor endpoints, stats endpoints, and admin endpoints
    with API key authentication (X-API-Key).
servers:
  - url: https://api.tvdatabase.com/v1
    description: Production server
  - url: https://staging-api.tvdatabase.com/v1
    description: Staging server

tags:
  - name: Shows
    description: TV show information and filtering
  - name: Actors
    description: Actor information and filtering
  - name: Genres
    description: Genre listing and metadata
  - name: Statistics
    description: Aggregations and quick stats
  - name: Admin
    description: Administrative endpoints (require API key)
  - name: Authentication
    description: API key generation

paths:

  /api-docs:
    get:
      tags: [Documentation]
      summary: Serve Swagger UI
      responses:
        '200':
          description: Swagger UI HTML page
          content:
            text/html:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/ServerError'

  /api-key:
    post:
      tags: [Authentication]
      summary: Generate API key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name,email]
              properties:
                name:
                  type: string
                  minLength: 1
                email:
                  type: string
                  format: email
      responses:
        '201':
          description: API key generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      api_key:
                        type: string
                        example: "550e8400-e29b-41d4-a716-446655440000"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /shows:
    get:
      tags: [Shows]
      summary: List shows
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Paginated shows list
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer }
                  page: { type: integer }
                  limit: { type: integer }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ShowSummary' }
        '500':
          $ref: '#/components/responses/ServerError'

  /shows/filter:
    get:
      tags: [Shows]
      summary: Filter shows
      parameters:
        - name: actors
          in: query
          schema:
            type: string
          description: "Filter by actor(s), comma separated"
        - name: genres
          in: query
          schema:
            type: string
          description: "Filter by genre(s), comma separated"
        - name: network
          in: query
          schema:
            type: string
        - name: min_rating
          in: query
          schema:
            type: number
        - name: startDate
          in: query
          schema:
            type: string
        - name: endDate
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Filtered shows
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer }
                  data: { type: array, items: { $ref: '#/components/schemas/ShowSummary' } }
        '400':
          $ref: '#/components/responses/BadRequest'

  /shows/random:
    get:
      tags: [Shows]
      summary: Random shows
      parameters:
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Random shows
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ShowSummary' }

  /shows/{id}:
    get:
      tags: [Shows]
      summary: Get show by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Show detail
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ShowDetail' }
        '404':
          $ref: '#/components/responses/NotFound'

  /shows/{id}/summary:
    get:
      tags: [Shows]
      summary: Abridged show summary
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Short show summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  show_id: { type: integer }
                  name: { type: string }
                  first_air_date: { type: string, format: date }
                  status: { type: string }
                  tmdb_rating: { type: number }
                  overview: { type: string }

  /genres:
    get:
      tags: [Genres]
      summary: List genres
      responses:
        '200':
          description: Genres list
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer }
                  data: { type: array, items: { type: object, properties: { genre_id: {type: integer}, name: {type: string} } } }

  /actors:
    get:
      tags: [Actors]
      summary: List actors
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: name
          in: query
          schema:
            type: string
          description: "Filter by actor name"
      responses:
        '200':
          description: Actors list
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer }
                  page: { type: integer }
                  data: { type: array, items: { $ref: '#/components/schemas/Actor' } }

  /actors/{id}:
    get:
      tags: [Actors]
      summary: Get actor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Actor profile
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Actor' }
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /actors/{id}/shows:
    get:
      tags: [Actors]
      summary: Shows by actor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Shows featuring the actor
          content:
            application/json:
              schema:
                type: object
                properties:
                  actor: { type: string }
                  count: { type: integer }
                  shows: { type: array, items: { type: object } }
        '400':
          $ref: '#/components/responses/BadRequest'

  /actors/{id}/ratings:
    get:
      tags: [Actors]
      summary: Actor top-rated shows
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: count
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Top rated shows by actor
          content:
            application/json:
              schema:
                type: object
                properties:
                  actor: { type: string }
                  count: { type: integer }
                  shows: { type: array, items: { $ref: '#/components/schemas/ShowSummary' } }

  /stats/genres:
    get:
      tags: [Statistics]
      summary: Stats per genre
      responses:
        '200':
          description: Genre statistics
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AggregateResponse' }
              example:
                - id: 18
                  name: "Drama"
                  show_count: 1250
                  avg_rating: 7.85
                  min_rating: 3.2
                  max_rating: 9.8
                - id: 35
                  name: "Comedy"
                  show_count: 980
                  avg_rating: 7.45
                  min_rating: 4.1
                  max_rating: 9.5

  /stats/networks:
    get:
      tags: [Statistics]
      summary: Stats per network
      responses:
        '200':
          description: Network statistics
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AggregateResponse' }
              example:
                - name: "HBO"
                  show_count: 145
                  avg_rating: 8.25
                  min_rating: 5.5
                  max_rating: 9.8
                - name: "Netflix"
                  show_count: 320
                  avg_rating: 7.65
                  min_rating: 4.2
                  max_rating: 9.3

  /stats/actors:
    get:
      tags: [Statistics]
      summary: Stats per actor
      responses:
        '200':
          description: Actor statistics
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AggregateResponse' }
              example:
                - id: 7399
                  name: "Ben Mendelsohn"
                  show_count: 12
                  avg_rating: 8.15
                  min_rating: 6.8
                  max_rating: 9.2
                - id: 1223
                  name: "Bryan Cranston"
                  show_count: 8
                  avg_rating: 8.75
                  min_rating: 7.5
                  max_rating: 9.5

  /stats/years:
    get:
      tags: [Statistics]
      summary: Stats per year
      responses:
        '200':
          description: Year statistics
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AggregateResponse' }
              example:
                - year: 2024
                  show_count: 156
                  avg_rating: 7.65
                  min_rating: 4.5
                  max_rating: 9.1
                - year: 2023
                  show_count: 234
                  avg_rating: 7.82
                  min_rating: 3.8
                  max_rating: 9.4

  /stats/countries:
    get:
      tags: [Statistics]
      summary: Stats per country
      responses:
        '200':
          description: Country statistics
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AggregateResponse' }
              example:
                - country: "US"
                  show_count: 3456
                  avg_rating: 7.55
                  min_rating: 2.1
                  max_rating: 9.8
                - country: "GB"
                  show_count: 892
                  avg_rating: 7.95
                  min_rating: 4.3
                  max_rating: 9.6

  /stats/status:
    get:
      tags: [Statistics]
      summary: Stats per status
      responses:
        '200':
          description: Status statistics
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AggregateResponse' }
              example:
                - status: "Ended"
                  show_count: 2145
                  avg_rating: 7.85
                  min_rating: 2.5
                  max_rating: 9.8
                - status: "Returning Series"
                  show_count: 1567
                  avg_rating: 7.65
                  min_rating: 3.2
                  max_rating: 9.5

  /stats/companies:
    get:
      tags: [Statistics]
      summary: Stats per company
      responses:
        '200':
          description: Company statistics
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AggregateResponse' }
              example:
                - name: "Warner Bros. Television"
                  show_count: 234
                  avg_rating: 7.92
                  min_rating: 4.5
                  max_rating: 9.6
                - name: "Sony Pictures Television"
                  show_count: 189
                  avg_rating: 7.68
                  min_rating: 5.1
                  max_rating: 9.3

  /admin/shows:
    post:
      tags: [Admin]
      summary: Create show (admin)
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowCreate'
            example:
              name: "Breaking Bad"
              original_name: "Breaking Bad"
              first_air_date: "2008-01-20"
              last_air_date: "2013-09-29"
              status: "Ended"
              overview: "A high school chemistry teacher turns to meth production."
              seasons: 5
              episodes: 62
              tmdb_rating: 9.5
              creators: ["Vince Gilligan"]
              country: "US"
              poster_url: "https://image.tmdb.org/t/p/poster.jpg"
              backdrop_url: "https://image.tmdb.org/t/p/backdrop.jpg"
              companies: [12, 34]
              networks: [7]
              genres: [1, 5]
      responses:
        '201':
          description: Show created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /admin/shows/{id}:
    put:
      tags: [Admin]
      summary: Update show (admin)
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowUpdate'
            example:
              name: "Breaking Bad (Updated)"
              seasons: 6
      responses:
        '200':
          description: Show updated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ShowDetail' }
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Admin]
      summary: Delete show (admin)
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Show deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/actors:
    post:
      tags: [Admin]
      summary: Create actor (admin)
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string, maxLength: 250 }
                profile_url: { type: string, maxLength: 500, format: uri }
            example:
              name: "Bryan Cranston"
              profile_url: "https://image.tmdb.org/t/p/profile17.jpg"
      responses:
        '201':
          description: Actor created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Actor' }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    PageParam:
      name: page
      in: query
      schema: { type: integer, default: 1, minimum: 1 }
      example: 1
    LimitParam:
      name: limit
      in: query
      schema: { type: integer, default: 50, minimum: 1, maximum: 100 }
      example: 50

  schemas:
    ShowSummary:
      type: object
      properties:
        show_id: { type: integer }
        name: { type: string }
        original_name: { type: string }
        first_air_date: { type: string, format: date }
        status: { type: string }
        seasons: { type: integer }
        episodes: { type: integer }
        tmdb_rating: { type: number }
        popularity: { type: number }
        poster_url: { type: string, format: uri }

    ShowDetail:
      allOf:
        - $ref: '#/components/schemas/ShowSummary'
        - type: object
          properties:
            last_air_date: { type: string, format: date }
            overview: { type: string }
            vote_count: { type: integer }
            backdrop_url: { type: string, format: uri }
            genres:
              type: array
              items:
                type: object
                properties:
                  genre_id: { type: integer }
                  name: { type: string }
            creators:
              type: array
              items: { type: string }
            networks:
              type: array
              items:
                type: object
                properties:
                  network_id: { type: integer }
                  name: { type: string }
                  logo: { type: string, format: uri }
                  country: { type: string }
            companies:
              type: array
              items:
                type: object
                properties:
                  company_id: { type: integer }
                  name: { type: string }
            actors:
              type: array
              items:
                type: object
                properties:
                  actor_id: { type: integer }
                  name: { type: string }
                  character: { type: string }
                  profile_url: { type: string }

    ShowCreate:
      type: object
      required: [name, first_air_date, status]
      properties:
        name: { type: string, maxLength: 250 }
        original_name: { type: string, maxLength: 250 }
        first_air_date: { type: string, format: date }
        last_air_date: { type: string, format: date }
        status:
          type: string
          enum: ["Returning Series", "Planned", "In Production", "Ended", "Canceled", "Pilot"]
        overview: { type: string, maxLength: 2000 }
        seasons: { type: integer, minimum: 0 }
        episodes: { type: integer, minimum: 0 }
        tmdb_rating: { type: number, minimum: 0, maximum: 10 }
        creators:
          items: { type: string, maxLength: 500 }
        country: { type: string, maxLength: 100 }
        poster_url: { type: string, format: uri, maxLength: 500 }
        backdrop_url: { type: string, format: uri, maxLength: 500 }
        companies:
          type: array
          items: { type: integer }
        networks:
          type: array
          items: { type: integer }
        genres:
          type: array
          items: { type: integer }

    ShowUpdate:
      type: object
      properties:
        name: { type: string, maxLength: 250 }
        original_name: { type: string, maxLength: 250 }
        first_air_date: { type: string, format: date }
        last_air_date: { type: string, format: date }
        status:
          type: string
          enum: ["Returning Series", "Planned", "In Production", "Ended", "Canceled", "Pilot"]
        overview: { type: string, maxLength: 2000 }
        seasons: { type: integer, minimum: 0 }
        episodes: { type: integer, minimum: 0 }
        poster_url: { type: string, format: uri, maxLength: 500 }
        backdrop_url: { type: string, format: uri, maxLength: 500 }

    Actor:
      type: object
      properties:
        actor_id: { type: integer }
        name: { type: string }
        profile_url: { type: string, format: uri }

    AggregateResponse:
      type: object
      required: [show_count, avg_rating, min_rating, max_rating]
      properties:
        show_count: { type: integer }
        avg_rating: { type: number }
        min_rating: { type: number }
        max_rating: { type: number }
        id: { type: integer }
        name: { type: string }
        year: { type: integer }
        status: { type: string }
        country: { type: string }

    ErrorResponse:
      type: object
      required: [success, message]
      properties:
        success: { type: boolean }
        message: { type: string }
        errorCode: { type: string }
        timestamp: { type: string, format: date-time }

  responses:
    BadRequest:
      description: Bad request - validation failed or invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            invalidInput:
              summary: Invalid input format
              value:
                success: false
                message: "Invalid format: missing or malformed fields"
    Unauthorized:
      description: Unauthorized - missing or invalid API key or credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missingApiKey:
              summary: Missing API key
              value:
                success: false
                message: "Unauthorized - missing or invalid API key"
    Forbidden:
      description: Forbidden - authenticated but insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            noPermission:
              summary: No permission
              value:
                success: false
                message: "Forbidden - insufficient permissions"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            resourceMissing:
              summary: Resource missing
              value:
                success: false
                message: "Not Found - requested resource does not exist"
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            serverFailure:
              summary: Server failure
              value:
                success: false
                message: "Internal Server Error - unexpected error occurred"